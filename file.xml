<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc toc="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-lpwan-coap-static-context-hc-14" category="std">

  <front>
    <title abbrev="LPWAN CoAP compression">LPWAN Static Context Header Compression (SCHC) for CoAP</title>

    <author initials="A." surname="Minaburo" fullname="Ana Minaburo">
      <organization>Acklio</organization>
      <address>
        <postal>
          <street>1137A avenue des Champs Blancs</street>
          <city>35510 Cesson-Sevigne Cedex</city>
          <country>France</country>
        </postal>
        <email>ana@ackl.io</email>
      </address>
    </author>
    <author initials="L." surname="Toutain" fullname="Laurent Toutain">
      <organization>Institut MINES TELECOM; IMT Atlantique</organization>
      <address>
        <postal>
          <street>2 rue de la Chataigneraie</street> <street>CS 17607</street>
          <city>35576 Cesson-Sevigne Cedex</city>
          <country>France</country>
        </postal>
        <email>Laurent.Toutain@imt-atlantique.fr</email>
      </address>
    </author>
    <author initials="R." surname="Andreasen" fullname="Ricardo Andreasen">
      <organization>Universidad de Buenos Aires</organization>
      <address>
        <postal>
          <street>Av. Paseo Colon 850</street>
          <city>C1063ACV Ciudad Autonoma de Buenos Aires</city>
          <country>Argentina</country>
        </postal>
        <email>randreasen@fi.uba.ar</email>
      </address>
    </author>

    <date year="2020" month="June" day="30"/>

    
    <workgroup>lpwan Working Group</workgroup>
    

    <abstract>


<t>This draft defines the way Static Context Header Compression (SCHC) 
header compression can be applied to the Constrained Application Protocol (CoAP). SCHC is a header 
compression mechanism adapted for constrained devices. SCHC uses a static description of 
the header to reduce the redundancy and the size of the information in the header. 
While <xref target="rfc8724"/> describes the SCHC compression and fragmentation framework, and its application 
for IPv6/UDP headers, this document applies the use of SCHC for CoAP headers. 
The CoAP header structure differs from IPv6 and UDP 
since CoAP uses a flexible header with a variable number of options, themselves of 
variable length. The CoAP protocol messages format is asymmetric: the request messages 
have a header format different from the one in the response messages.
This specification gives guidance on how to apply SCHC to flexible headers and
how to leverage the asymmetry for more efficient compression Rules.</t>



    </abstract>


  </front>

  <middle>


<section anchor="Introduction" title="Introduction">

<t>CoAP <xref target="rfc7252"/> is designed to easily interop with HTTP 
(Hypertext Transfer Protocol) 
and is optimized for REST-based (Representational 
state transfer) services.  Although CoAP was designed for constrained
devices, the size of a CoAP header still is too large for the
constraints of LPWAN (Low Power Wide Area Networks) and some
compression is needed to reduce the header size.</t>

<t>The <xref target="rfc8724"/> defines SCHC, a header compression mechanism for LPWAN network 
based on a static context. The section 5 of the <xref target="rfc8724"/> explains the architecture where 
compression and decompression are done. The context is known by both ends before 
transmission. The way the context is configured, provisioned or exchanged is out of the scope of this document.</t>

<t>CoAP is an End-to-End protocol at the application level, so CoAP compression requires to install common Rules between two hosts
and IP Routing may be needed to allow End-to-End communication. Therefore, SCHC compression may aply at two different levels,
one to compress IP and UDP as described in <xref target="rfc8724"/> in the LPWAN network and another at the application level. These two compressions
may be independent. The Compression Rules can be setup by two independent entities and are out of the scope of this document. In both cases SCHC mechanism remains the same.</t>

<t>SCHC compresses and decompresses headers based on shared contexts
between devices. 
Each context consists of multiple Rules. Each Rule can match
header fields and specific values or ranges of values. If a Rule matches, the
matched header fields are substituted by the RuleID and optionally some
residual bits. Thus, different Rules may correspond to different types of
packets that a device expects to send or receive.</t>

<t>A Rule describes the complete header of the packet with an ordered list of fields descriptions, 
see section 7 of <xref target="rfc8724"/>,
thereby each description contains the field ID (FID), its length (FL) and its position (FP), 
a direction indicator (DI) (upstream, downstream and bidirectional) and some associated Target Values (TV).</t>

<t>A Matching Operator (MO) is associated to each header field description. 
The Rule is selected if all the MOs fit the TVs for all fields of the incoming header.<vspace />
In that case, a Compression/Decompression Action (CDA) associated to each field defines 
how the compressed and the decompressed values are computed. Compression mainly results in one of 4 actions:</t>

<t><list style="symbols">
  <t>send the field value,</t>
  <t>send nothing,</t>
  <t>send some least significant bits of the field or</t>
  <t>send an index.</t>
</list></t>

<t>After applying the compression there may be some bits to be sent, these values are called Compression Residues.</t>

<t>SCHC is a general mechanism that can be applied to different protocols, the exact Rules to
be used depend on the protocol and the application. The section 10 of the <xref target="rfc8724"/> describes the compression scheme 
for IPv6 and UDP headers. This document targets the CoAP header compression using SCHC.</t>

<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in BCP 14
<xref target="RFC2119"/><xref target="rfc8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

</section>
</section>
<section anchor="applying-schc-to-coap-headers" title="Applying SCHC to CoAP headers">

<t>The SCHC Compression Rules can be applied to CoAP headers. SCHC Compression of the CoAP 
header MAY be done in conjunction with the lower layers (IPv6/UDP) or independently.
The SCHC adaptation layers as described in Section 5 
of <xref target="rfc8724"/> and
may be used as shown in <xref target="Fig-SCHCCOAP"/>.</t>

<figure title="Rule scope for CoAP" anchor="Fig-SCHCCOAP"><artwork><![CDATA[
 ^   +------------+    ^  +------------+        ^  +------------+
 |   |    CoAP    |    |  |    CoAP    |  inner |  |    CoAP    |
 |   +------------+    v  +------------+        x  |    OSCORE  |
 |   |    UDP     |       |    DTLS    |  outer |  +------------+
 |   +------------+       +------------+        |  |    UDP     |
 |   |    IPv6    |       |    UDP     |        |  +------------+
 v   +------------+       +------------+        |  |    IPv6    |
                          |    IPv6    |        v  +------------+
                          +------------+                 
                                                  
                                                  
]]></artwork></figure>

<t><xref target="Fig-SCHCCOAP"/> shows some examples for CoAP protocol stacks and the SCHC Rule’s scope.</t>

<figure title="Compression/decompression at the LPWAN bondary" anchor="Fig-SCHCCOAP1"><artwork><![CDATA[
   (device)        (LPWAN APP)        (internet)           (Host)  

   +--------+                                           +--------+
   |  CoAP  |                                           |  CoAP  | 
   +--------+                                           +--------+
   |  UDP   |                                           |  UDP   |
   +--------+     +----------------+                    +--------+
   |  IPv6  |     |      IPv6      |                    |  IPv6  |
   +--------+     +--------+-------+                    +--------+
   |  SCHC  |     |  SCHC  |       |                    |        |
   +--------+     +--------+       +                    +        +
   |  LPWAN |     | LPWAN  |       |                    |        |
   +--------+     +--------+-------+                    +--------+    
       ((((((()))))))           -----  ------  ------  -----                                   
]]></artwork></figure>

<t>In the first example, a Rule compresses the complete header stack from IPv6 to CoAP. In this case, 
SCHC C/D (Static Context Header Compression Compressor/Decompressor) is performed at the Sender and 
at the Receiver.</t>

<figure title="Standalone CoAP ene-to-end compression/decompression" anchor="Fig-SCHCCOAP2"><artwork><![CDATA[
   (device)        (LPWAN APP)        (internet)           (Host)  

   +--------+                                           +--------+
   |  CoAP  |                                           |  CoAP  | 
   +--------+                                           +--------+
   |  SCHC  |                                           |  SCHC  |
   +--------+                                           +--------+
   |  UDP   |                                           |  UDP   |
   +--------+     +----------------+                    +--------+
   |  IPv6  |     |      IPv6      |                    |  IPv6  |
   +--------+     +--------+-------+                    +--------+
   |  SCHC  |     |  SCHC  |       |                    |        |
   +--------+     +--------+       +                    +        +
   |  LPWAN |     | LPWAN  |       |                    |        |
   +--------+     +--------+-------+                    +--------+    
       ((((((()))))))           -----  ------  ------  -----                                   
]]></artwork></figure>

<t>In the second example, the SCHC compression is applied in the CoAP layer, compressing the CoAP header 
independently of the other layers. The RuleID and the Compression Residue are encrypted using 
a mechanism such as DTLS. Only the other end can decipher the information. If needed, layers below 
use SCHC to compress the header as defined in <xref target="rfc8724"/> document. 
This use case realizes an End-to-End context initialization between the sender and the receiver, see <xref target="SCHCParams"/>.</t>

<figure title="OSCORE compression/decompression." anchor="Fig-SCHCCOAP3"><artwork><![CDATA[
   (device)        (LPWAN APP)        (internet)           (Host)  

   +--------+                                           +--------+
   |  CoAP  |                                           |  CoAP  | 
   |  inner |                                           |  inner |
   +--------+                                           +--------+
   |  SCHC  |                                           |  SCHC  |
   +--------+                                           +--------+
   |  CoAP  |                                           |  CoAP  |
   |  outer |                                           |  outer |
   +--------+                                           +--------+
   |  UDP   |                                           |  UDP   |
   +--------+     +----------------+                    +--------+
   |  IPv6  |     |      IPv6      |                    |  IPv6  |
   +--------+     +--------+-------+                    +--------+
   |  SCHC  |     |  SCHC  |       |                    |        |
   +--------+     +--------+       +                    +        +
   |  LPWAN |     | LPWAN  |       |                    |        |
   +--------+     +--------+-------+                    +--------+    
       ((((((()))))))           -----  ------  ------  -----                                   
]]></artwork></figure>

<t>In the third example, the Object Security for Constrained RESTful Environments (OSCORE) <xref target="rfc8613"/> is used. 
In this case, two rulesets are used 
to compress the CoAP message.  A first ruleset
focused on the inner header and is applied end to end by both ends. A second ruleset
compresses the outer header and the layers below  and is done between the Sender and the Receiver.</t>

</section>
<section anchor="coap-headers-compressed-with-schc" title="CoAP Headers compressed with SCHC">

<t>The use of SCHC over the CoAP header uses the same description and compression/decompression techniques as the one for
IP and UDP explained in the <xref target="rfc8724"/>. 
For CoAP, SCHC Rules description uses the direction information to optimize the compression
by reducing the number of Rules needed to compress headers.  The field description MAY define
both request/response headers and target values in the same Rule, using the DI (direction
indicator) to make the difference.
As for other protocols, when the compressor does not find a correct Rule to compress the
header, the packet MUST be sent uncompressed using the RuleID dedicated to this purpose, and
the Compression Residue is the complete header of the packet.  See section 6 
of <xref target="rfc8724"/>.</t>

<section anchor="differences-between-coap-and-udpip-compression" title="Differences between CoAP and UDP/IP Compression">

<t>CoAP compression differs from IPv6 and UDP compression on the following aspects:</t>

<t><list style="symbols">
  <t>The CoAP protocol is asymmetric, the headers are different for a request or a response. 
For example, the URI-path option is mandatory in the request, and it is not present in the response, 
a request may contain an Accept option, and the response may include a Content option. 
In comparison, IPv6 and UDP returning path swap the value of some fields in the header.<vspace />
But all the directions have the same fields  (e.g., source and destination addresses fields).  <vspace blankLines='1'/>
The <xref target="rfc8724"/> defines the use of a Direction Indicator (DI) 
in the Field Description, which allows a single Rule to process message headers differently 
depending on the direction.</t>
  <t>Even when a field is “symmetric” (i.e., found in both directions), 
the values carried in each direction are different. <vspace />
The compression may use a matching list in the TV to limit the range of expected values 
in a particular direction and therefore reduces the size of the Compression Residue. 
Through the Direction Indicator (DI), a field description in the Rules splits the possible field value into two parts,
one for each direction.
For instance, 
if a client sends only CON requests, the type can be elided by compression, and the answer may use 
one single bit to carry either the ACK or RST type.
The field Code have as well the same behavior, the 0.0X code format value 
in the request and Y.ZZ code format in the response.</t>
  <t>Headers in IPv6 and UDP have a fixed size. The size is not sent as part of the Compression Residue, 
but is defined in the Rule. 
Some CoAP header fields have variable lengths, so the length is also specified in the Field Description. 
For example, the Token size may vary from 0 to 8 bytes.
And the CoAP options have a variable length since they use the Type-Length-Value 
encoding format, as URI-path or URI-query.  <vspace blankLines='1'/>
Section 7.5.2 from <xref target="rfc8724"/> offers the possibility to define a function 
for the Field length in the Field Description to have knowledge of the length before compression. 
When doing SCHC compression of a variable-length field,<vspace />
if the field size is not known, the Field Length in the Rule is set as variable and the size is sent with the
Compression Residue.</t>
  <t>A field can appear several time in the CoAP headers.  This is
typical for elements of a URI (path or queries).
The SCHC specification <xref target="rfc8724"/> allows a Field ID to
appear several times in the Rule, and uses the Field Position (FP)
to identify the correct instance, and thereby removing the ambiguity of
the matching operation.</t>
  <t>Field sizes defined in the CoAP protocol can be too large
regarding LPWAN traffic constraints.  This is particularly true
for the Message ID field and the Token field. SCHC uses different
Matching operators (MO) to perform the compression, see section 7.4 of <xref target="rfc8724"/>.
In this case the Most Significant Bits (MSB) MO can be applied to reduce the information carried on LPWANs.</t>
</list></t>

</section>
</section>
<section anchor="CoAPcomp" title="Compression of CoAP header fields">

<t>This section discusses the compression of the different CoAP header fields. The CoAP compression with 
SCHC follows the Section 7.1 of <xref target="rfc8724"/>.</t>

<section anchor="coap-version-field" title="CoAP version field">

<t>CoAP version is bidirectional and MUST be elided during the SCHC compression, since it always
contains the same value. In the future, if new versions of CoAP are defined, new Rules will
be needed to avoid ambiguities between versions.</t>

</section>
<section anchor="coap-type-field" title="CoAP type field">

<t>The CoAP Protocol <xref target="rfc7252"/> has four type of messages: two request (CON, NON);
one response (ACK) and one empty message (RST).</t>

<t>The field SHOULD be elided if for instance a client is sending only NON or only CON messages. For the
RST message a dedicated Rule may be needed. For other usages a mapping list can be used.</t>

</section>
<section anchor="coap-code-field" title="CoAP code field">

<t>The code field indicates the Request Method used in CoAP, a IANA registry <xref target="rfc7252"/>.
The compression of the CoAP code field follows the same principle as that of the CoAP type field. If the device plays a specific role, the set of code values can be split in two parts, the request codes with the 0 class and the response values.</t>

<t>If the device only implements a CoAP client, the request code can be reduced to the set of requests the client is able to process.</t>

<t>A mapping list can be used for known values. For other values the field cannot be compressed an the value needs to be sent in the Compression Residue.</t>

</section>
<section anchor="coap-message-id-field" title="CoAP Message ID field">

<t>The Message ID field can be compressed with the MSB(x) MO and the Least Significant Bits (LSB) CDA, see section 7.4 of <xref target="rfc8724"/>.</t>

</section>
<section anchor="coap-token-fields" title="CoAP Token fields">
<t>Token is defined through two CoAP fields, Token Length in the mandatory header and 
Token Value directly following the mandatory CoAP header.</t>

<t>Token Length is processed as any protocol field. If the value does not change, the size 
can be stored in the TV and elided during the transmission. Otherwise, it will 
have to be sent in the Compression Residue.</t>

<t>Token Value MUST NOT be sent as a variable length residue to avoid ambiguity with Token 
Length. Therefore, Token Length value MUST be used to define the size of the Compression Residue. 
A specific function designated as “TKL” MUST be used in the Rule. During the decompression, this function returns the value contained in the Token Length field.</t>

</section>
</section>
<section anchor="coap-options" title="CoAP options">
<t>CoAP defines options that are placed after the based header in Option Numbers order, see <xref target="rfc7252"/>. Each Option instance in a message uses the format Delta-Type (D-T), Length (L), Value (V). When applying SCHC compression to the Option, the D-T, L, and V format serves to make the Rule description of the Option. 
The SCHC compression builds the description of the Option by using in the Field ID the Option Number built from D-T; in TV, the Option Value; and the Option Length uses section 7.4 of RFC8724. When the Option Length has a wellknown size it can be stored in the Rule. Therefore, SCHC compression does not send it. Otherwise, SCHC Compression carries the length of the Compression Residue in addition to the Compression Residue value.</t>

<t>CoAP request and response do not include the same options. So Compression Rules may reflect these assymetry by tagging the direction indicator.</t>

<t>Note that length coding differs between CoAP options and SCHC variable size Compression Residue.</t>

<t>The following sections present how SCHC compresses some specific CoAP Options.</t>

<section anchor="coap-content-and-accept-options" title="CoAP Content and Accept options.">

<t>If a single value is expected by the client, it can be stored in the TV and elided during the transmission. Otherwise, if several possible values are expected by the client, a matching-list SHOULD be used to limit the size of the Compression Residue. Otherwise, the value has to be sent as a Compression Residue (fixed or variable length).</t>

</section>
<section anchor="coap-option-max-age-uri-host-and-uri-port-fields" title="CoAP option Max-Age, Uri-Host and Uri-Port fields">

<t>If the duration is known by both ends, the value can be elided.</t>

<t>A matching list can be used if some well-known values are defined.</t>

<t>Otherwise these options can be sent as a Compression Residue (fixed or variable length).</t>

</section>
<section anchor="coap-option-uri-path-and-uri-query-fields" title="CoAP option Uri-Path and Uri-Query fields">

<t>Uri-Path and Uri-Query elements are a repeatable options, the Field Position (FP) gives the 
position in the path.</t>

<t>A Mapping list can be used to reduce the size of variable Paths or Queries. In that case, to
optimize the compression, several elements can be regrouped into a single entry. 
Numbering of elements do not change, MO comparison is set with the first element 
of the matching.</t>

<figure title="complex path example" anchor="Fig--complex-path"><artwork><![CDATA[
   +-------------+---+--+--+--------+---------+-------------+
   | Field       |FL |FP|DI| Target | Match   |     CDA     |
   |             |   |  |  | Value  | Opera.  |             |
   +-------------+---+--+--+--------+---------+-------------+
   |URI-Path     |   | 1|up|["/a/b",|equal    |not-sent     |
   |             |   |  |  |"/c/d"] |         |             |
   |URI-Path     |var| 3|up|        |ignore   |value-sent   |
   +-------------+---+--+--+--------+---------+-------------+


]]></artwork></figure>

<t>In <xref target="Fig--complex-path"/> a single bit residue can be used to code one of the 2 paths. If regrouping were not allowed, a 2 bits residue would be needed. The third path element is sent as a variable size residue.</t>

<section anchor="variable-length-uri-path-and-uri-query" title="Variable length Uri-Path and Uri-Query">

<t>When the length is not known at the Rule creation, the Field Length MUST be set to variable, 
and the unit is set to bytes.</t>

<t>The MSB MO can be applied to a Uri-Path or Uri-Query element. Since MSB value is given in bit,
the size MUST always be a multiple of 8 bits.</t>

<t>The length sent at the beginning of a variable length residue indicates the size of the LSB in bytes.</t>

<t>For instance for a CORECONF path /c/X6?k=”eth0” the Rule can be set to:</t>

<figure title="CORECONF URI compression" anchor="Fig-CoMicompress"><artwork><![CDATA[
   +-------------+---+--+--+--------+---------+-------------+
   | Field       |FL |FP|DI| Target | Match   |     CDA     |
   |             |   |  |  | Value  | Opera.  |             |
   +-------------+---+--+--+--------+---------+-------------+
   |URI-Path     |  8| 1|up|"c"     |equal    |not-sent     |
   |URI-Path     |var| 2|up|        |ignore   |value-sent   |
   |URI-Query    |var| 1|up|"k="    |MSB(16)  |LSB          |
   +-------------+---+--+--+--------+---------+-------------+
]]></artwork></figure>

<t><xref target="Fig-CoMicompress"/> shows the parsing and the compression of the URI, where c is not sent.
The second element is sent with the length (i.e. 0x2 X 6) followed by the query option 
(i.e. 0x05 “eth0”).</t>

</section>
<section anchor="variable-number-of-path-or-query-elements" title="Variable number of path or query elements">

<t>The number of Uri-path or Uri-Query elements in a Rule is fixed at the Rule creation time. If the number
varies, several Rules SHOULD be created to cover all the possibilities. Another possibility is
to define the length of Uri-Path to variable and send a Compression Residue with a length of 0 to 
indicate that this Uri-Path is empty. This adds 4 bits to the variable Residue size. See section 7.5.2 <xref target="rfc8724"/></t>

</section>
</section>
<section anchor="coap-option-size1-size2-proxy-uri-and-proxy-scheme-fields" title="CoAP option Size1, Size2, Proxy-URI and Proxy-Scheme fields">

<t>If the field value has to be sent, TV is not set, MO is set to “ignore” and CDA is set
to “value-sent”. A mapping MAY also be used.</t>

<t>Otherwise, the TV is set to the value, MO is set to “equal” and CDA is set to “not-sent”.</t>

</section>
<section anchor="coap-option-etag-if-match-if-none-match-location-path-and-location-query-fields" title="CoAP option ETag, If-Match, If-None-Match, Location-Path and Location-Query fields">

<t>These fields values cannot be stored in a Rule entry. They MUST always be sent with the
Compression Residues.</t>

</section>
</section>
<section anchor="schc-compression-of-coap-extension-rfcs" title="SCHC compression of CoAP extension RFCs">

<section anchor="block" title="Block">

<t>Block <xref target="rfc7959"/> allows a fragmentation at the CoAP level. SCHC also includes a fragmentation protocol.
They can be both used. If a block option is used, its content MUST be sent as a Compression Residue.</t>

</section>
<section anchor="observe" title="Observe">

<t>The <xref target="rfc7641"/> defines the Observe option. The TV is not set, MO is set to “ignore” and the
CDA is set to “value-sent”. SCHC does not limit the maximum size for this option (3 bytes).
To reduce the transmission size, either the device implementation MAY limit the delta between two consecutive values,
or a proxy can modify the increment.</t>

<t>Since an RST message may be sent to inform a server that the client does not require Observe
response, a Rule MUST allow the transmission of this message.</t>

</section>
<section anchor="no-response" title="No-Response">

<t>The <xref target="rfc7967"/> defines a No-Response option limiting the responses made by a server to
a request. If the value is known by both ends, then TV is set to this value, MO is 
set to “equal” and CDA is set to “not-sent”.</t>

<t>Otherwise, if the value is changing over time, TV is not set, MO is set to “ignore” and
CDA to “value-sent”. A matching list can also be used to reduce the size.</t>

<!--
## Time Scale

The time scale {{I-D.toutain-core-time-scale}} option allows a client to inform the server that
it is in a constrained network and that message ID MUST be kept for a duration given by the option.

If the value is known by both ends, then TV is set to this value, MO is 
set to "equal" and CDA is set to "not-sent".

Otherwise, if the value is changing over time, TV is not set, MO is set to "ignore" and
CDA to "value-sent". A matching list can also be used to reduce the size. 
-->

</section>
<section anchor="Sec-OSCORE" title="OSCORE">

<t>OSCORE <xref target="rfc8613"/> defines end-to-end protection for CoAP messages. 
This section describes how SCHC Rules can be applied to compress OSCORE-protected messages.</t>

<figure title="OSCORE Option" anchor="Fig-OSCORE-Option"><artwork><![CDATA[
      0 1 2 3 4 5 6 7 <--------- n bytes ------------->
     +-+-+-+-+-+-+-+-+---------------------------------
     |0 0 0|h|k|  n  |      Partial IV (if any) ...    
     +-+-+-+-+-+-+-+-+---------------------------------
     |               |                                |
     |<--  CoAP   -->|<------ CoAP OSCORE_piv ------> |
        OSCORE_flags 

      <- 1 byte -> <------ s bytes ----->
     +------------+----------------------+-----------------------+
     | s (if any) | kid context (if any) | kid (if any)      ... |
     +------------+----------------------+-----------------------+
     |                                   |                       |
     | <------ CoAP OSCORE_kidctxt ----->|<-- CoAP OSCORE_kid -->|

]]></artwork></figure>

<t>The encoding of the OSCORE Option Value defined in Section 6.1 of <xref target="rfc8613"/> is repeated in <xref target="Fig-OSCORE-Option"/>.</t>

<t>The first byte specifies the content of the OSCORE options using flags. The three most significant bits of this byte are reserved and always set to 0. Bit h, when set, indicates the presence of the kid context field in the option. Bit k, when set, indicates the presence of a kid field. The three least significant bits n indicate the length of the piv (Partial Initialization Vector) field in bytes. When n = 0, no piv is present.</t>

<t>The flag byte is followed by the piv field, kid context field, and kid field in this order, and if present, the length of the kid context field is encoded in the first byte denoting by s the length of the kid context in bytes.</t>

<t>This specification recommends identifying the OSCORE Option and the fields it contains
Conceptually, it discerns up to 4 distinct pieces of information within the OSCORE option: the flag bits, the piv, the kid context, and the kid. The SCHC Rule splits into four field descriptions the OSCORE option to compress them:</t>

<t><list style="symbols">
  <t>CoAP OSCORE_flags,</t>
  <t>CoAP OSCORE_piv,</t>
  <t>CoAP OSCORE_kidctxt,</t>
  <t>CoAP OSCORE_kid.</t>
</list></t>

<t>The OSCORE Option shows superimposed these four fields using the format <xref target="Fig-OSCORE-Option"/>, the CoAP OSCORE_kidctxt field includes the size bits s.</t>

</section>
</section>
<section anchor="examples-of-coap-header-compression" title="Examples of CoAP header compression">

<section anchor="mandatory-header-with-con-message" title="Mandatory header with CON message">

<t>In this first scenario, the LPWAN Compressor at the Network Gateway side receives from an Internet client 
a POST message, which is immediately acknowledged by the Device. For this simple
scenario, the Rules are described <xref target="Fig-CoAP-header-1"/>.</t>

<figure title="CoAP Context to compress header without token" anchor="Fig-CoAP-header-1"><artwork><![CDATA[
 RuleID 1
+-------------+--+--+--+------+---------+-------------++------------+
| Field       |FL|FP|DI|Target| Match   |     CDA     ||    Sent    |
|             |  |  |  |Value | Opera.  |             ||   [bits]   |
+-------------+--+--+--+------+---------+-------------++------------+
|CoAP version |  |  |bi|  01  |equal    |not-sent     ||            |
|CoAP Type    |  |  |dw| CON  |equal    |not-sent     ||            |
|CoAP Type    |  |  |up|[ACK, |         |             ||            | 
|             |  |  |  | RST] |match-map|matching-sent|| T          |
|CoAP TKL     |  |  |bi| 0    |equal    |not-sent     ||            |
|CoAP Code    |  |  |bi|[0.00,|         |             ||            |
|             |  |  |  | ...  |         |             ||            |
|             |  |  |  | 5.05]|match-map|matching-sent||  CC CCC    |
|CoAP MID     |  |  |bi| 0000 |MSB(7 )  |LSB          ||        M-ID|
|CoAP Uri-Path|  |  |dw| path |equal 1  |not-sent     ||            |
+-------------+--+--+--+------+---------+-------------++------------+

]]></artwork></figure>

<t>The version  and Token Length fields are elided. The 26 method and response codes
defined in <xref target="rfc7252"/> has been shrunk to 5 bits
using a matching list.  Uri-Path contains
a single element indicated in the matching operator.</t>

<t>SCHC Compression reduces the header sending only the Type, a mapped
code and the least significant bits of Message ID (9 bits in the example above).</t>

<t>Note that a request sent by a client located in an Application Server to a server 
located in the device, may not be compressed through
this Rule since the MID will not start with 7 bits equal to 0. A CoAP proxy,
before the core SCHC C/D can rewrite the message ID to a value matched by the Rule.</t>

</section>
<section anchor="Sec-OSCORE-Examples" title="OSCORE Compression">

<t>OSCORE aims to solve the problem of end-to-end encryption for CoAP messages.
The goal, therefore, is to hide as much of the message as possible
while still enabling proxy operation.</t>

<t>Conceptually this is achieved by splitting the CoAP message into an Inner
Plaintext and Outer OSCORE Message. The Inner Plaintext contains sensitive
information which is not necessary for proxy operation. This, in turn, is the
part of the message which can be encrypted until it
reaches its end destination. The Outer Message acts as a shell matching the 
format of a regular CoAP message, and includes all Options and information 
needed for proxy operation and caching. This decomposition is illustrated in 
<xref target="Fig-inner-outer"/>.</t>

<t>CoAP options are sorted into one of 3 classes, each granted a specific
type of protection by the protocol:</t>

<t><list style="symbols">
  <t>Class E: Encrypted options moved to the Inner Plaintext,</t>
  <t>Class I: Integrity-protected options included in the AAD for the encryption
 of the Plaintext but otherwise left untouched in the Outer Message,</t>
  <t>Class U: Unprotected options left untouched in the Outer Message.</t>
</list></t>

<t>Additionally, the OSCORE Option is added as an Outer option, signalling that the
message is OSCORE protected. This option carries the information necessary to
retrieve the Security Context with which the message was encrypted so that it
may be correctly decrypted at the other end-point.</t>

<figure title="A CoAP message is split into an OSCORE outer and plaintext" anchor="Fig-inner-outer"><artwork><![CDATA[
 
                      Original CoAP Message
                   +-+-+---+-------+---------------+
                   |v|t|tkl| code  |  Msg Id.      |
                   +-+-+---+-------+---------------+....+
                   | Token                              |
                   +-------------------------------.....+
                   | Options (IEU)            |
                   .                          .
                   .                          .
                   +------+-------------------+ 
                   | 0xFF |
                   +------+------------------------+
                   |                               |
                   |     Payload                   |
                   |                               |
                   +-------------------------------+      
                          /                \ 
                         /                  \
                        /                    \
                       /                      \
     Outer Header     v                        v  Plaintext
  +-+-+---+--------+---------------+          +-------+
  |v|t|tkl|new code|  Msg Id.      |          | code  |
  +-+-+---+--------+---------------+....+     +-------+-----......+
  | Token                               |     | Options (E)       |
  +--------------------------------.....+     +-------+------.....+
  | Options (IU)             |                | OxFF  |
  .                          .                +-------+-----------+
  . OSCORE Option            .                |                   |
  +------+-------------------+                | Payload           |
  | 0xFF |                                    |                   |
  +------+                                    +-------------------+

]]></artwork></figure>

<t><xref target="Fig-inner-outer"/> shows the message format for the OSCORE Message and
Plaintext.</t>

<t>In the Outer Header, the original message code is hidden and replaced by a default
dummy value. As seen in Sections 4.1.3.5 and 4.2 of the <xref target="rfc8613"/>,
the message code is replaced by POST for requests and Changed for responses when Observe 
is not used. If Observe is used, the message code is replaced by FETCH for requests and Content
for responses.</t>

<t>The original message code is put into the
first byte of the Plaintext. Following the message code, the class E options comes
and if present the original message Payload is preceded by its payload marker.</t>

<t>The Plaintext is now encrypted by an AEAD algorithm which integrity protects
Security Context parameters and eventually any class I options from the
Outer Header. Currently no CoAP options are marked class I. The resulting
Ciphertext becomes the new Payload of the OSCORE message, as illustrated in
<xref target="Fig-full-oscore"/>.</t>

<t>This Ciphertext is, as defined in RFC 5116, the concatenation of the
encrypted Plaintext and its authentication tag. Note that Inner Compression only 
affects the Plaintext before encryption, thus we can only aim to reduce this first,
variable length component of the Ciphertext. The authentication tag is fixed in 
length and considered part of the cost of protection.</t>

<figure title="OSCORE message" anchor="Fig-full-oscore"><artwork><![CDATA[
 
   
     Outer Header                           
  +-+-+---+--------+---------------+          
  |v|t|tkl|new code|  Msg Id.      |          
  +-+-+---+--------+---------------+....+     
  | Token                               |     
  +--------------------------------.....+     
  | Options (IU)             |               
  .                          .               
  . OSCORE Option            .               
  +------+-------------------+               
  | 0xFF |                                  
  +------+---------------------------+
  |                                  |
  | Ciphertext: Encrypted Inner      |
  |             Header and Payload   |
  |             + Authentication Tag |
  |                                  |
  +----------------------------------+
   
]]></artwork></figure>

<t>The SCHC Compression scheme consists of compressing both the Plaintext before
encryption and the resulting OSCORE message after encryption, see <xref target="Fig-OSCORE-Compression"/>.</t>

<t>This translates into a segmented process where SCHC compression is applied independently in 
2 stages, each with its corresponding set of Rules, with the Inner SCHC Rules and the Outer SCHC Rules. 
This way compression is applied to all fields of the original CoAP message.</t>

<t>Note that since the Inner part of the message can only be decrypted by the corresponding end-point, this end-point will also have to implement Inner SCHC Compression/Decompression.</t>

<figure title="OSCORE Compression Diagram" anchor="Fig-OSCORE-Compression"><artwork><![CDATA[
     Outer Message                             OSCORE Plaintext
  +-+-+---+--------+---------------+          +-------+
  |v|t|tkl|new code|  Msg Id.      |          | code  |
  +-+-+---+--------+---------------+....+     +-------+-----......+
  | Token                               |     | Options (E)       |
  +--------------------------------.....+     +-------+------.....+
  | Options (IU)             |                | OxFF  |
  .                          .                +-------+-----------+
  . OSCORE Option            .                |                   |
  +------+-------------------+                | Payload           |
  | 0xFF |                                    |                   |
  +------+------------+                       +-------------------+
  |  Ciphertext       |<---------\                      |
  |                   |          |                      v
  +-------------------+          |             +-----------------+
          |                      |             |   Inner SCHC    |
          v                      |             |   Compression   |
    +-----------------+          |             +-----------------+
    |   Outer SCHC    |          |                      |
    |   Compression   |          |                      v
    +-----------------+          |              +-------+
          |                      |              |RuleID |
          v                      |              +-------+--+
      +--------+           +------------+       | Residue  |
      |RuleID' |           | Encryption | <---  +----------+--------+
      +--------+--+        +------------+       |                   |
      | Residue'  |                             | Payload           |
      +-----------+-------+                     |                   |
      |  Ciphertext       |                     +-------------------+
      |                   |     
      +-------------------+
      
]]></artwork></figure>

</section>
<section anchor="example-oscore-compression" title="Example OSCORE Compression">

<t>An example is given with a GET Request and its consequent Content
Response from a device-based CoAP client to a cloud-based CoAP server. 
A possible set of Rules for the Inner and Outer SCHC
Compression is shown. A dump of the results and a contrast between SCHC + OSCORE
performance with SCHC + COAP performance is also listed. This gives an approximation to the
cost of security with SCHC-OSCORE.</t>

<t>Our first example CoAP message is the GET Request in <xref target="Fig-GET-temp"/></t>

<figure title="CoAP GET Request" anchor="Fig-GET-temp"><artwork><![CDATA[
Original message:
=================
0x4101000182bb74656d7065726174757265

Header:
0x4101
01   Ver
  00   CON
    0001   tkl
        00000001   Request Code 1 "GET"

0x0001 = mid
0x82 = token

Options:
0xbb74656d7065726174757265
Option 11: URI_PATH
Value = temperature

Original msg length:   17 bytes.
]]></artwork></figure>

<t>Its corresponding response is the CONTENT Response in <xref target="Fig-CONTENT-temp"/>.</t>

<figure title="CoAP CONTENT Response" anchor="Fig-CONTENT-temp"><artwork><![CDATA[
Original message:
=================
0x6145000182ff32332043

Header:
0x6145
01   Ver
  10   ACK
    0001   tkl
        01000101   Successful Response Code 69 "2.05 Content"

0x0001 = mid
0x82 = token

0xFF  Payload marker
Payload:
0x32332043

Original msg length:   10
]]></artwork></figure>

<t>The SCHC Rules for the Inner Compression include all fields that are already present in a regular CoAP message. The methods described in <xref target="CoAPcomp"/> applies to these fields. As an example, see <xref target="Fig-Inner-Rules"/>.</t>

<figure title="Inner SCHC Rules" anchor="Fig-Inner-Rules"><artwork><![CDATA[
 RuleID 0
+---------------+--+--+-----------+-----------+-----------++------+
| Field         |FP|DI|  Target   |    MO     |     CDA   || Sent |
|               |  |  |  Value    |           |           ||[bits]|
+---------------+--+--+-----------+-----------+-----------++------+
|CoAP Code      |  |up|   1       |  equal    |not-sent   ||      |
|CoAP Code      |  |dw|[69,132]   | match-map |match-sent || c    |
|CoAP Uri-Path  |  |up|temperature|  equal    |not-sent   ||      |
|COAP Option-End|  |dw| 0xFF      |  equal    |not-sent   ||      |
+---------------+--+--+-----------+-----------+-----------++------+
]]></artwork></figure>

<t><xref target="Fig-Inner-Compression-GET"/> shows the Plaintext obtained for our example GET Request and follows the process of Inner Compression and Encryption until we end up with the Payload to be added in the outer OSCORE Message.</t>

<t>In this case the original message has no payload and its resulting Plaintext can be compressed up to only 1 byte (size of the RuleID). The AEAD algorithm preserves this length in its first output, but also yields a fixed-size tag which cannot be compressed and has to be included in the OSCORE message. This translates into an overhead in total message length, which limits the amount of compression that can be achieved and plays into the cost of adding security to the exchange.</t>

<figure title="Plaintext compression and encryption for GET Request" anchor="Fig-Inner-Compression-GET"><artwork><![CDATA[
   ________________________________________________________
  |                                                        |
  | OSCORE Plaintext                                       |
  |                                                        |
  | 0x01bb74656d7065726174757265  (13 bytes)               |
  |                                                        |
  | 0x01 Request Code GET                                  |
  |                                                        |
  |      bb74656d7065726174757265 Option 11: URI_PATH      |
  |                               Value = temperature      |
  |________________________________________________________|

                              |
                              |
                              | Inner SCHC Compression
                              |
                              v
                _________________________________
               |                                 |
               | Compressed Plaintext            |
               |                                 |
               | 0x00                            |
               |                                 |
               | RuleID = 0x00 (1 byte)         |
               | (No residue)                    |
               |_________________________________|

                              |
                              | AEAD Encryption
                              |  (piv = 0x04)
                              v
         _________________________________________________
        |                                                 |
        |  encrypted_plaintext = 0xa2 (1 byte)            |
        |  tag = 0xc54fe1b434297b62 (8 bytes)             |
        |                                                 |
        |  ciphertext = 0xa2c54fe1b434297b62 (9 bytes)    |
        |_________________________________________________|

]]></artwork></figure>

<t>In <xref target="Fig-Inner-Compression-CONTENT"/>  the process is repeated for the example CONTENT Response. The residue is 1 bit long. Note that since SCHC adds padding after the payload, this misalignment causes the hexadecimal code from the payload to differ from the original, even though it has not been compressed.</t>

<t>On top of this, the overhead from the tag bytes is incurred as before.</t>

<figure title="Plaintext compression and encryption for CONTENT Response" anchor="Fig-Inner-Compression-CONTENT"><artwork><![CDATA[
   ________________________________________________________
  |                                                        |
  | OSCORE Plaintext                                       |
  |                                                        |
  | 0x45ff32332043  (6 bytes)                              |
  |                                                        |
  | 0x45 Successful Response Code 69 "2.05 Content"        |
  |                                                        |
  |     ff Payload marker                                  |
  |                                                        |
  |       32332043 Payload                                 |
  |________________________________________________________|

                              |
                              |
                              | Inner SCHC Compression
                              |
                              v
         __________________________________________
        |                                          |
        | Compressed Plaintext                     |
        |                                          |
        | 0x001919902180 (6 bytes)                 |                                 
        |                                          |
        |   00 RuleID                             |
        |                                          |
        |    0b0 (1 bit match-map residue)         |
        |       0x32332043 >> 1 (shifted payload)  |
        |                        0b0000000 Padding |
        |__________________________________________|

                              |
                              | AEAD Encryption
                              |  (piv = 0x04)
                              v
     _________________________________________________________
    |                                                         |
    |  encrypted_plaintext = 0x10c6d7c26cc1 (6 bytes)         |
    |  tag = 0xe9aef3f2461e0c29 (8 bytes)                     |
    |                                                         |
    |  ciphertext = 0x10c6d7c26cc1e9aef3f2461e0c29 (14 bytes) |
    |_________________________________________________________|

]]></artwork></figure>

<t>The Outer SCHC Rules (<xref target="Fig-Outer-Rules"/>) must process the OSCORE Options
fields. In <xref target="Fig-Protected-Compressed-GET"/> and <xref target="Fig-Protected-Compressed-CONTENT"/> 
we show a dump of the OSCORE
Messages generated from our example messages once they have been
provided with the Inner Compressed Ciphertext in the payload.  These
are the messages that have to be compressed by the Outer SCHC Compression.</t>

<figure title="Protected and Inner SCHC Compressed GET Request" anchor="Fig-Protected-Compressed-GET"><artwork><![CDATA[
Protected message:
==================
0x4102000182d8080904636c69656e74ffa2c54fe1b434297b62
(25 bytes)

Header:
0x4102
01   Ver
  00   CON
    0001   tkl
        00000010   Request Code 2 "POST"

0x0001 = mid
0x82 = token

Options:
0xd8080904636c69656e74 (10 bytes)
Option 21: OBJECT_SECURITY
Value = 0x0904636c69656e74
          09 = 000 0 1 001 Flag byte
                   h k  n
            04 piv
              636c69656e74 kid


0xFF  Payload marker
Payload:
0xa2c54fe1b434297b62 (9 bytes)
]]></artwork></figure>

<figure title="Protected and Inner SCHC Compressed CONTENT Response" anchor="Fig-Protected-Compressed-CONTENT"><artwork><![CDATA[
Protected message:
==================
0x6144000182d008ff10c6d7c26cc1e9aef3f2461e0c29
(22 bytes)

Header:
0x6144
01   Ver
  10   ACK
    0001   tkl
        01000100   Successful Response Code 68 "2.04 Changed"

0x0001 = mid
0x82 = token

Options:
0xd008 (2 bytes)
Option 21: OBJECT_SECURITY
Value = b''

0xFF  Payload marker
Payload:
0x10c6d7c26cc1e9aef3f2461e0c29 (14 bytes)
]]></artwork></figure>

<t>For the flag bits, a number of compression methods has been shown to be
useful depending on the application.  The simplest alternative is to
provide a fixed value for the flags, combining MO equal and CDA not-
sent.  This saves most bits but could prevent flexibility.  Otherwise,
match-mapping could be used to choose from an interested number of configurations to the exchange.  Otherwise, MSB could be used to mask off the 3 hard-coded most
significant bits.</t>

<t>Note that fixing a flag bit will limit the choice of CoAP Options that can be used in the exchange, since their values are dependent on certain options.</t>

<t>The piv field lends itself to having a number of bits masked off with MO MSB and CDA LSB. This could be useful in applications where the message frequency is low such as that found in LPWAN technologies. Note that compressing the sequence numbers effectively reduces the maximum amount of sequence numbers that can be used in an exchange. Once this amount is exceeded, the OSCORE keys need to be re-established.</t>

<t>The size s included in the kid context field MAY be masked off with CDA MSB. The rest of the field could have additional bits masked off, or have the whole field be fixed with MO equal and CDA not-sent. The same holds for the kid field.</t>

<t><xref target="Fig-Outer-Rules"/> shows a possible set of Outer Rules to compress the Outer Header.</t>

<figure title="Outer SCHC Rules" anchor="Fig-Outer-Rules"><artwork><![CDATA[
RuleID 0
+-------------------+--+--+--------------+--------+---------++------+
| Field             |FP|DI|    Target    |   MO   |   CDA   || Sent |
|                   |  |  |    Value     |        |         ||[bits]|
+-------------------+--+--+--------------+--------+---------++------+ 
|CoAP version       |  |bi|      01      |equal   |not-sent ||      |
|CoAP Type          |  |up|      0       |equal   |not-sent ||      |
|CoAP Type          |  |dw|      2       |equal   |not-sent ||      |
|CoAP TKL           |  |bi|      1       |equal   |not-sent ||      |
|CoAP Code          |  |up|      2       |equal   |not-sent ||      |
|CoAP Code          |  |dw|      68      |equal   |not-sent ||      |
|CoAP MID           |  |bi|     0000     |MSB(12) |LSB      ||MMMM  |
|CoAP Token         |  |bi|     0x80     |MSB(5)  |LSB      ||TTT   |
|CoAP OSCORE_flags  |  |up|     0x09     |equal   |not-sent ||      |
|CoAP OSCORE_piv    |  |up|     0x00     |MSB(4)  |LSB      ||PPPP  |
|COAP OSCORE_kid    |  |up|0x636c69656e70|MSB(52) |LSB      ||KKKK  |
|COAP OSCORE_kidctxt|  |bi|     b''      |equal   |not-sent ||      |
|CoAP OSCORE_flags  |  |dw|     b''      |equal   |not-sent ||      |
|CoAP OSCORE_piv    |  |dw|     b''      |equal   |not-sent ||      |
|CoAP OSCORE_kid    |  |dw|     b''      |equal   |not-sent ||      |
|COAP Option-End    |  |dw|     0xFF     |equal   |not-sent ||      |
+-------------------+--+--+--------------+--------+---------++------+
]]></artwork></figure>

<t>These Outer Rules are applied to the example GET Request and CONTENT Response. The resulting messages  are shown in <xref target="Fig-Compressed-GET"/> and <xref target="Fig-Compressed-CONTENT"/>.</t>

<figure title="SCHC-OSCORE Compressed GET Request" anchor="Fig-Compressed-GET"><artwork><![CDATA[
Compressed message:
==================
0x001489458a9fc3686852f6c4 (12 bytes)
0x00 RuleID
    1489 Compression Residue
        458a9fc3686852f6c4 Padded payload

Compression Residue:
0b 0001 010 0100 0100 (15 bits -> 2 bytes with padding)
    mid tkn piv  kid

Payload
0xa2c54fe1b434297b62 (9 bytes)

Compressed message length: 12 bytes
]]></artwork></figure>

<figure title="SCHC-OSCORE Compressed CONTENT Response" anchor="Fig-Compressed-CONTENT"><artwork><![CDATA[
Compressed message:
==================
0x0014218daf84d983d35de7e48c3c1852 (16 bytes)
0x00 RuleID
    14 Compression Residue
      218daf84d983d35de7e48c3c1852 Padded payload
Compression Residue:
0b0001 010 (7 bits -> 1 byte with padding)
  mid  tkn

Payload
0x10c6d7c26cc1e9aef3f2461e0c29 (14 bytes)

Compressed msg length: 16 bytes
]]></artwork></figure>

<t>For contrast, we compare these results with what would be obtained by SCHC
compressing the original CoAP messages without protecting them with OSCORE. To
do this, we compress the CoAP messages according to the SCHC Rules in <xref target="Fig-NoOsc-Rules"/>.</t>

<figure title="SCHC-CoAP Rules (No OSCORE)" anchor="Fig-NoOsc-Rules"><artwork><![CDATA[
RuleID 1
+---------------+--+--+-----------+---------+-----------++--------+
| Field         |FP|DI|  Target   |   MO    |     CDA   ||  Sent  |
|               |  |  |  Value    |         |           || [bits] |
+---------------+--+--+-----------+---------+-----------++--------+ 
|CoAP version   |  |bi|    01     |equal    |not-sent   ||        |
|CoAP Type      |  |up|    0      |equal    |not-sent   ||        |
|CoAP Type      |  |dw|    2      |equal    |not-sent   ||        |
|CoAP TKL       |  |bi|    1      |equal    |not-sent   ||        |
|CoAP Code      |  |up|    2      |equal    |not-sent   ||        |
|CoAP Code      |  |dw| [69,132]  |match-map|map-sent   ||C       |
|CoAP MID       |  |bi|   0000    |MSB(12)  |LSB        ||MMMM    |
|CoAP Token     |  |bi|    0x80   |MSB(5)   |LSB        ||TTT     |
|CoAP Uri-Path  |  |up|temperature|equal    |not-sent   ||        |
|COAP Option-End|  |dw|   0xFF    |equal    |not-sent   ||        |
+---------------+--+--+-----------+---------+-----------++--------+
]]></artwork></figure>

<t>This yields the results in <xref target="Fig-GET-temp-no-oscore"/> for the Request, and
<xref target="Fig-CONTENT-temp-no-oscore"/> for the Response.</t>

<figure title="CoAP GET Compressed without OSCORE" anchor="Fig-GET-temp-no-oscore"><artwork><![CDATA[
Compressed message:
==================
0x0114
0x01 = RuleID

Compression Residue:
0b00010100 (1 byte)

Compressed msg length: 2

]]></artwork></figure>

<figure title="CoAP CONTENT Compressed without OSCORE" anchor="Fig-CONTENT-temp-no-oscore"><artwork><![CDATA[

Compressed message:
==================
0x010a32332043
0x01 = RuleID

Compression Residue:
0b00001010 (1 byte)

Payload
0x32332043

Compressed msg length: 6


]]></artwork></figure>

<t>As can be seen, the difference between applying SCHC + OSCORE as compared to 
regular SCHC + COAP is about 10 bytes of cost.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document has no request to IANA.</t>

</section>
<section anchor="SecConsiderations" title="Security considerations">

<t>When applied to LPWAN, the Security Considerations of SCHC header compression RFC8724 are valid for SCHC CoAP header compression. When CoAP uses OSCORE, the security considerations defined in RFC8613 does not change when SCHC header compression is applied.</t>

<t>The definition of SCHC over CoAP header fields permits the compression of header information only. The SCHC header compression itself does not increase or reduce the level of security in the communication. When the communication does not use any security protocol as OSCORE, DTLS, or other. It is highly necessary to use a layer two security.</t>

<t>DoS attacks are possible if an intruder can introduce a compressed SCHC corrupted packet onto the link and cause a compression efficiency reduction. However, an intruder having the ability to add corrupted packets at the link layer raises additional security issues than those related to the use of header compression.</t>

<t>SCHC compression returns variable-length Residues for some CoAP fields. In the compressed header, the length sent is not the original header field length but the length of the Residue. So if a corrupted packet comes to the decompressor with a longer or shorter length than the one in the original header, SCHC decompression will detect an error and drops the packet.</t>

<t>OSCORE compression is also based on the same compression method described in <xref target="rfc8724"/>. The size of the Initialisation Vector (IV) residue must be considered carefully. A residue size obtained with LSB CDA over the IV has an impact on the compression efficiency and the frequency the device will renew its key. This operation requires several exchanges and is energy consuming.</t>

<t>SCHC header and compression Rules MUST remain tightly coupled. Otherwise, an encrypted residue may be decompressed in a different way by the receiver. To avoid this situation, if the Rule is modified in one location, the OSCORE keys MUST be re-established.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>The authors would like to thank (in alphabetic order): Christian Amsuss, Dominique Barthel, Carsten Bormann, Theresa Enghardt, Thomas Fossati, Klaus Hartke, Francesca Palombini, Alexander Pelov and Goran Selander.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="rfc7252" target='https://www.rfc-editor.org/info/rfc7252'>
<front>
<title>The Constrained Application Protocol (CoAP)</title>
<author initials='Z.' surname='Shelby' fullname='Z. Shelby'><organization /></author>
<author initials='K.' surname='Hartke' fullname='K. Hartke'><organization /></author>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t><t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t></abstract>
</front>
<seriesInfo name='RFC' value='7252'/>
<seriesInfo name='DOI' value='10.17487/RFC7252'/>
</reference>



<reference  anchor="rfc7967" target='https://www.rfc-editor.org/info/rfc7967'>
<front>
<title>Constrained Application Protocol (CoAP) Option for No Server Response</title>
<author initials='A.' surname='Bhattacharyya' fullname='A. Bhattacharyya'><organization /></author>
<author initials='S.' surname='Bandyopadhyay' fullname='S. Bandyopadhyay'><organization /></author>
<author initials='A.' surname='Pal' fullname='A. Pal'><organization /></author>
<author initials='T.' surname='Bose' fullname='T. Bose'><organization /></author>
<date year='2016' month='August' />
<abstract><t>There can be machine-to-machine (M2M) scenarios where server responses to client requests are redundant.  This kind of open-loop exchange (with no response path from the server to the client) may be desired to minimize resource consumption in constrained systems while updating many resources simultaneously or performing high-frequency updates. CoAP already provides Non-confirmable (NON) messages that are not acknowledged by the recipient.  However, the request/response semantics still require the server to respond with a status code indicating &quot;the result of the attempt to       understand and satisfy the request&quot;, per RFC 7252.</t><t>This specification introduces a CoAP option called 'No-Response'. Using this option, the client can explicitly express to the server its disinterest in all responses against the particular request. This option also provides granular control to enable expression of disinterest to a particular response class or a combination of response classes.  The server MAY decide to suppress the response by not transmitting it back to the client according to the value of the No-Response option in the request.  This option may be effective for both unicast and multicast requests.  This document also discusses a few examples of applications that benefit from this option.</t></abstract>
</front>
<seriesInfo name='RFC' value='7967'/>
<seriesInfo name='DOI' value='10.17487/RFC7967'/>
</reference>



<reference  anchor="rfc7641" target='https://www.rfc-editor.org/info/rfc7641'>
<front>
<title>Observing Resources in the Constrained Application Protocol (CoAP)</title>
<author initials='K.' surname='Hartke' fullname='K. Hartke'><organization /></author>
<date year='2015' month='September' />
<abstract><t>The Constrained Application Protocol (CoAP) is a RESTful application protocol for constrained nodes and networks.  The state of a resource on a CoAP server can change over time.  This document specifies a simple protocol extension for CoAP that enables CoAP clients to &quot;observe&quot; resources, i.e., to retrieve a representation of a resource and keep this representation updated by the server over a period of time.  The protocol follows a best-effort approach for sending new representations to clients and provides eventual consistency between the state observed by each client and the actual resource state at the server.</t></abstract>
</front>
<seriesInfo name='RFC' value='7641'/>
<seriesInfo name='DOI' value='10.17487/RFC7641'/>
</reference>



<reference  anchor="rfc7959" target='https://www.rfc-editor.org/info/rfc7959'>
<front>
<title>Block-Wise Transfers in the Constrained Application Protocol (CoAP)</title>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<author initials='Z.' surname='Shelby' fullname='Z. Shelby' role='editor'><organization /></author>
<date year='2016' month='August' />
<abstract><t>The Constrained Application Protocol (CoAP) is a RESTful transfer protocol for constrained nodes and networks.  Basic CoAP messages work well for small payloads from sensors and actuators; however, applications will need to transfer larger payloads occasionally -- for instance, for firmware updates.  In contrast to HTTP, where TCP does the grunt work of segmenting and resequencing, CoAP is based on datagram transports such as UDP or Datagram Transport Layer Security (DTLS).  These transports only offer fragmentation, which is even more problematic in constrained nodes and networks, limiting the maximum size of resource representations that can practically be transferred.</t><t>Instead of relying on IP fragmentation, this specification extends basic CoAP with a pair of &quot;Block&quot; options for transferring multiple blocks of information from a resource representation in multiple request-response pairs.  In many important cases, the Block options enable a server to be truly stateless: the server can handle each block transfer separately, with no need for a connection setup or other server-side memory of previous block transfers.  Essentially, the Block options provide a minimal way to transfer larger representations in a block-wise fashion.</t><t>A CoAP implementation that does not support these options generally is limited in the size of the representations that can be exchanged, so there is an expectation that the Block options will be widely used in CoAP implementations.  Therefore, this specification updates RFC 7252.</t></abstract>
</front>
<seriesInfo name='RFC' value='7959'/>
<seriesInfo name='DOI' value='10.17487/RFC7959'/>
</reference>



<reference  anchor="rfc8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="rfc8613" target='https://www.rfc-editor.org/info/rfc8613'>
<front>
<title>Object Security for Constrained RESTful Environments (OSCORE)</title>
<author initials='G.' surname='Selander' fullname='G. Selander'><organization /></author>
<author initials='J.' surname='Mattsson' fullname='J. Mattsson'><organization /></author>
<author initials='F.' surname='Palombini' fullname='F. Palombini'><organization /></author>
<author initials='L.' surname='Seitz' fullname='L. Seitz'><organization /></author>
<date year='2019' month='July' />
<abstract><t>This document defines Object Security for Constrained RESTful Environments (OSCORE), a method for application-layer protection of the Constrained Application Protocol (CoAP), using CBOR Object Signing and Encryption (COSE).  OSCORE provides end-to-end protection between endpoints communicating using CoAP or CoAP-mappable HTTP. OSCORE is designed for constrained nodes and networks supporting a range of proxy operations, including translation between different transport protocols.</t><t>Although an optional functionality of CoAP, OSCORE alters CoAP options processing and IANA registration.  Therefore, this document updates RFC 7252.</t></abstract>
</front>
<seriesInfo name='RFC' value='8613'/>
<seriesInfo name='DOI' value='10.17487/RFC8613'/>
</reference>



<reference  anchor="rfc8724" target='https://www.rfc-editor.org/info/rfc8724'>
<front>
<title>SCHC: Generic Framework for Static Context Header Compression and Fragmentation</title>
<author initials='A.' surname='Minaburo' fullname='A. Minaburo'><organization /></author>
<author initials='L.' surname='Toutain' fullname='L. Toutain'><organization /></author>
<author initials='C.' surname='Gomez' fullname='C. Gomez'><organization /></author>
<author initials='D.' surname='Barthel' fullname='D. Barthel'><organization /></author>
<author initials='JC.' surname='Zúñiga' fullname='JC. Zúñiga'><organization /></author>
<date year='2020' month='April' />
<abstract><t>This document defines the Static Context Header Compression and fragmentation (SCHC) framework, which provides both a header compression mechanism and an optional fragmentation mechanism. SCHC has been designed with Low-Power Wide Area Networks (LPWANs) in mind.</t><t>SCHC compression is based on a common static context stored both in the LPWAN device and in the network infrastructure side. This document defines a generic header compression mechanism and its application to compress IPv6/UDP headers.</t><t>This document also specifies an optional fragmentation and reassembly mechanism. It can be used to support the IPv6 MTU requirement over the LPWAN technologies. Fragmentation is needed for IPv6 datagrams that, after SCHC compression or when such compression was not possible, still exceed the Layer 2 maximum payload size.</t><t>The SCHC header compression and fragmentation mechanisms are independent of the specific LPWAN technology over which they are used. This document defines generic functionalities and offers flexibility with regard to parameter settings and mechanism choices. This document standardizes the exchange over the LPWAN between two SCHC entities. Settings and choices specific to a technology or a product are expected to be grouped into profiles, which are specified in other documents. Data models for the context and profiles are out of scope.</t></abstract>
</front>
<seriesInfo name='RFC' value='8724'/>
<seriesInfo name='DOI' value='10.17487/RFC8724'/>
</reference>




    </references>



<section anchor="SCHCParams" title="Extension to the RFC8724 Annex D.">

<t>This section extends the RFC8724 Annex D list.</t>

<t><list style="symbols">
  <t>How to establish the End-to-End context initialization using SCHC for CoAP header only.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
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
r+EQSqXjHafyvwETX58Y5NMAAA==

-->

</rfc>

